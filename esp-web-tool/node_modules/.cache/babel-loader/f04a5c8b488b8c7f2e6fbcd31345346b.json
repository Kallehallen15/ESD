{"ast":null,"code":"import localforage from \"localforage\";\n\nconst connectESP = async t => {\n  const esploaderMod = await window.esptoolPackage;\n  const e = await navigator.serial.requestPort();\n  return t.log(\"Connecting...\"), await e.open({\n    baudRate: t.baudRate\n  }), t.log(\"Connected successfully.\"), new esploaderMod.ESPLoader(e, t);\n};\n\nconst formatMacAddr = macAddr => {\n  return macAddr.map(value => value.toString(16).toUpperCase().padStart(2, '0')).join(':');\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nconst defaultFiles = chipName => {\n  //console.log(chipName)\n  if (chipName.includes('ESP32')) {\n    return [{\n      offset: '1000'\n    }, {\n      offset: '8000'\n    }, {\n      offset: 'E000'\n    }, {\n      offset: '10000'\n    }];\n  } else {\n    return [{\n      offset: 0\n    }];\n  }\n};\n\nconst saveFiles = newFiles => {\n  localforage.setItem('uploads', newFiles);\n};\n\nconst loadFiles = async chipName => {\n  const value = await localforage.getItem('uploads');\n\n  if (value) {\n    //console.log(value)\n    return value;\n  }\n\n  return defaultFiles(chipName);\n};\n\nconst supported = () => {\n  return 'serial' in navigator;\n};\n\nexport { connectESP, formatMacAddr, sleep, defaultFiles, saveFiles, loadFiles, supported };","map":{"version":3,"names":["localforage","connectESP","t","esploaderMod","window","esptoolPackage","e","navigator","serial","requestPort","log","open","baudRate","ESPLoader","formatMacAddr","macAddr","map","value","toString","toUpperCase","padStart","join","sleep","ms","Promise","resolve","setTimeout","defaultFiles","chipName","includes","offset","saveFiles","newFiles","setItem","loadFiles","getItem","supported"],"sources":["/home/mintunnaing/Desktop/project-x/ESD/t2/src/lib/esp.js"],"sourcesContent":["import localforage from \"localforage\"\n\nconst connectESP = async t => {\n    const esploaderMod = await window.esptoolPackage;\n    const e = await navigator.serial.requestPort();\n    return t.log(\"Connecting...\"), await e.open({\n        baudRate: t.baudRate\n    }), t.log(\"Connected successfully.\"), new esploaderMod.ESPLoader(e, t);\n};\n\nconst formatMacAddr = (macAddr) => {\n    return macAddr.map((value) => value.toString(16).toUpperCase().padStart(2, '0')).join(':')\n}\n\nconst sleep = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst defaultFiles = (chipName) => {\n    //console.log(chipName)\n\n    if (chipName.includes('ESP32')) {\n        return [\n            { offset: '1000' },\n            { offset: '8000' },\n            { offset: 'E000' },\n            { offset: '10000' }\n        ]\n    } else {\n        return [\n            { offset: 0 }\n        ]\n    }\n}\n\nconst saveFiles = (newFiles) => {\n    localforage.setItem('uploads', newFiles)\n}\n\nconst loadFiles = async (chipName) => {\n    const value = await localforage.getItem('uploads')\n\n    if (value) {\n        //console.log(value)\n        return value\n    }\n\n    return defaultFiles(chipName)\n}\n\nconst supported = () => {\n    return ('serial' in navigator)\n}\n\nexport { connectESP, formatMacAddr, sleep, defaultFiles, saveFiles, loadFiles, supported }"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,aAAxB;;AAEA,MAAMC,UAAU,GAAG,MAAMC,CAAN,IAAW;EAC1B,MAAMC,YAAY,GAAG,MAAMC,MAAM,CAACC,cAAlC;EACA,MAAMC,CAAC,GAAG,MAAMC,SAAS,CAACC,MAAV,CAAiBC,WAAjB,EAAhB;EACA,OAAOP,CAAC,CAACQ,GAAF,CAAM,eAAN,GAAwB,MAAMJ,CAAC,CAACK,IAAF,CAAO;IACxCC,QAAQ,EAAEV,CAAC,CAACU;EAD4B,CAAP,CAA9B,EAEHV,CAAC,CAACQ,GAAF,CAAM,yBAAN,CAFG,EAE+B,IAAIP,YAAY,CAACU,SAAjB,CAA2BP,CAA3B,EAA8BJ,CAA9B,CAFtC;AAGH,CAND;;AAQA,MAAMY,aAAa,GAAIC,OAAD,IAAa;EAC/B,OAAOA,OAAO,CAACC,GAAR,CAAaC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAe,EAAf,EAAmBC,WAAnB,GAAiCC,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAAvB,EAA0EC,IAA1E,CAA+E,GAA/E,CAAP;AACH,CAFD;;AAIA,MAAMC,KAAK,GAAIC,EAAD,IAAQ;EAClB,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACH,CAFD;;AAIA,MAAMI,YAAY,GAAIC,QAAD,IAAc;EAC/B;EAEA,IAAIA,QAAQ,CAACC,QAAT,CAAkB,OAAlB,CAAJ,EAAgC;IAC5B,OAAO,CACH;MAAEC,MAAM,EAAE;IAAV,CADG,EAEH;MAAEA,MAAM,EAAE;IAAV,CAFG,EAGH;MAAEA,MAAM,EAAE;IAAV,CAHG,EAIH;MAAEA,MAAM,EAAE;IAAV,CAJG,CAAP;EAMH,CAPD,MAOO;IACH,OAAO,CACH;MAAEA,MAAM,EAAE;IAAV,CADG,CAAP;EAGH;AACJ,CAfD;;AAiBA,MAAMC,SAAS,GAAIC,QAAD,IAAc;EAC5BhC,WAAW,CAACiC,OAAZ,CAAoB,SAApB,EAA+BD,QAA/B;AACH,CAFD;;AAIA,MAAME,SAAS,GAAG,MAAON,QAAP,IAAoB;EAClC,MAAMX,KAAK,GAAG,MAAMjB,WAAW,CAACmC,OAAZ,CAAoB,SAApB,CAApB;;EAEA,IAAIlB,KAAJ,EAAW;IACP;IACA,OAAOA,KAAP;EACH;;EAED,OAAOU,YAAY,CAACC,QAAD,CAAnB;AACH,CATD;;AAWA,MAAMQ,SAAS,GAAG,MAAM;EACpB,OAAQ,YAAY7B,SAApB;AACH,CAFD;;AAIA,SAASN,UAAT,EAAqBa,aAArB,EAAoCQ,KAApC,EAA2CK,YAA3C,EAAyDI,SAAzD,EAAoEG,SAApE,EAA+EE,SAA/E"},"metadata":{},"sourceType":"module"}